spring.profiles.active=@activatedProperties@
#postgresql
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=@db.url@
spring.datasource.username=@db.usr@
spring.datasource.password=@db.pwd@
#redis
spring.redis.database=0
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.timeout=60000
#oauth2
spring.security.oauth2.client.registration.github.client-id=fdc9e06a90caade5c591
spring.security.oauth2.client.registration.github.client-secret=ffb3f55de44b5140d48a9e8528c2d1447544bd4e
#jooq
spring.jooq.sql-dialect=postgres
#flyway
spring.flyway.schemas=public
spring.flyway.enabled=true
#log
server.error.whitelabel.enabled=false
logging.level.org.springframework.web=debug
logging.level.org.springframework.security=debug
#mail
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=lucky13Monkey@gmail.com
spring.mail.password=Alexa23l01e91x
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

server.host=http://localhost:8080/

app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=http://localhost:8081/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redire
